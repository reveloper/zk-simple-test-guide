#include "imports/stdlib.fc";

const op::verify = "op::verify"c;
const int P1_SIZE = 48 * 8;
const int P2_SIZE = 96 * 8;



const slice IC0 = "b5e3be18fbb751a4c3621f1b5e0939905393619fd232a6951f11670d32eb47374e879e3b6c2c6d6a7e11feb8515f1f37"s;
const slice IC1 = "b0b158ed38d152a6b07ec6b859444c60d56dc4dd10dc8bc323c6a88923e42d2298e83e72441e782730abb261582c66f4"s;

const slice vk_gamma_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice vk_delta_2 = "807d0707f66c4692278e0eb9ae00b14faa88cb2e8d4d8df02d88a4466aacffbf20ae989cc177cc29322cf18f8c518fbd1362a4e504dd4db77a0ba0e149ca70b03c0eafb3eb81166ac6318751add463f36e69f3d79cf67bcf8a564453ba4ada64"s;
const slice vk_alpha_1 = "8e2129fc32c650479ccb8d0579fdcf09db6f8ce866c39dcd7b799bf13f645c2f936bc6726e6df03a791fb67fff8bf294"s;
const slice vk_beta_2 = "87e36e0c34d76cb13a50053a4e150e90ad804fae6db5dfbe2380799bf6c4561c58906f2d479d6e0ebbf9c1c2e74789bb02d5a3777e1ecc67bc3537237338fc2bdff2f2eed9cb0b83234e6da0b44a6631ca5c82547ea7bbfdf97daad17911c50a"s;

slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
slice bls_g1_multiexp(
    
    slice x1, int y1,
    
    int n
) asm "BLS_G1_MULTIEXP";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";

global int ctx_res;

;; load_data populates storage variables using stored data
() load_data() impure {

    var ds = get_data().begin_parse();

    ctx_res = ds~load_uint(32);

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(ctx_res, 32)
            .end_cell()
    );
}


(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, P1_SIZE);
    s~skip_bits(P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, P2_SIZE);
    s~skip_bits(P2_SIZE);
    return (s, p2);
}

(slice, int) load_newint(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    int x = s~load_uint(256);
    return (s, x);
}

() groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    
    int pubInput0 
    
) impure {

    slice cpub = bls_g1_multiexp(
        
        IC1, pubInput0,
        
        1
    );


    cpub = bls_g1_add(cpub, IC0);
    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub, vk_gamma_2,
        pi_a_neg, pi_b,
        pi_c, vk_delta_2,
        vk_alpha_1, vk_beta_2,
        4);
    ;; ctx_res = a;
    if (a == 0) {
        ctx_res = 0;
    } else {
        ctx_res = 1;
    }
    save_data();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    
    if (op == op::verify) {

        slice pi_a = in_msg_body~load_p1();
        slice pi_b = in_msg_body~load_p2();
        slice pi_c = in_msg_body~load_p1();


        
        int pubInput0 = in_msg_body~load_newint();
        

        groth16Verify(
            pi_a,
            pi_b,
            pi_c,
            
            pubInput0 
            
        );
        return ();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}


int get_res() method_id {
    load_data();
    return ctx_res;
}
